buildscript {
    ext {
        springBootVersion = '2.1.6.RELEASE'
        camelVersion = '2.17.0'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('io.spring.gradle:propdeps-plugin:0.0.9.RELEASE')
    }
}

plugins {
    id 'net.ltgt.apt' version '0.16'
    id "org.sonarqube" version "2.6.2"

    id "org.springframework.boot" version "2.0.3.RELEASE"
    // generate git commit information (exposed via /info endpoint)
    //id "com.gorylenko.gradle-git-properties" version "1.5.1"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply from: 'gradle/liquibase.gradle'

configurations {
    mapstruct
    diff
}

configure(allprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
}

group 'com.example'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8


repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }

    // repository for sprinfox / swagger
    jcenter()
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/'}
}

springBoot {
    // generate gradle build information (exposed via /info endpoint)
    buildInfo()
}

build {
    doLast {
        // println "build doLast launched."
        // def outDir = "$projectDir/out"
        // def gitInfo=new File("$buildDir/resources/main/git.properties")
        // def buildInfo=new File("$buildDir/resources/main/META-INF/build-info.properties")

        // if (new File(outDir).exists()) {
        //     println "need to copy 2 files to $outDir"

        //     if (gitInfo.exists()) {
        //         println "copying $gitInfo"
        //         copy {
        //             from gitInfo
        //             into "$outDir/production/resources"
        //         }
        //     }

        //     if (buildInfo.exists()) {
        //         println "copying $buildInfo"
        //         copy {
        //             from buildInfo
        //             into "$outDir/production/resources/META-INF"
        //         }
        //     }
        // }
    }
}

// gitProperties {
//     keys = ['git.branch', 'git.build.host', 'git.build.time', 'git.build.version', 'git.closest.tag.name', 'git.commit.id', 'git.commit.id.abbrev', 'git.commit.message.full', 'git.commit.message.short', 'git.commit.time', 'git.remote.origin.url', 'git.tags', 'git.total.commit.count']
// }

dependencies {
    // Spring : Rest, Data, ...
//    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-webflux')
//    compile('org.springframework.security:spring-security-config')
//    compile('org.springframework.security:spring-security-web')



//    compile('org.springframework.security:spring-security-core')
//    runtime('org.springframework.boot:spring-boot-devtools')

    testCompile('org.springframework.boot:spring-boot-starter-test')
//    testCompile('org.springframework.security:spring-security-test')

    // https://mvnrepository.com/artifact/net.sf.transmorph/transmorph
//    compile group: 'net.sf.transmorph', name: 'transmorph', version: '3.1.3'

    // postgresql
    runtime('org.postgresql:postgresql')

//    compile('org.liquibase:liquibase-core')
    // lombok
    compile('org.projectlombok:lombok:1.18.2')
    annotationProcessor("org.projectlombok:lombok:1.18.2")

    // logstash
//    compile('net.logstash.logback:logstash-logback-encoder:6.1')

    // reactor test
//    testCompile('io.projectreactor:reactor-test:3.2.10.RELEASE')

    // for annotations
//    compile('com.google.code.findbugs:jsr305:3.0.2')

//    compile('org.apache.commons:commons-lang3:3.9')

    // configuration properties metadata
    // see https://docs.spring.io/spring-boot/docs/2.0.0.RC1/reference/html/configuration-metadata.html#configuration-metadata-annotation-processor
//    optional('org.springframework.boot:spring-boot-configuration-processor')

//    testCompile('net.javacrumbs.json-unit:json-unit-fluent:1.11.0')

     // spring cache
//    compile("org.springframework.boot:spring-boot-starter-cache")

    compile("org.apache.tomcat.embed:tomcat-embed-core:9.0.22")

    // springfox / swagger documentation
//    compile "io.springfox:springfox-swagger2:3.0.0-SNAPSHOT"
//    compile "io.springfox:springfox-spring-webflux:3.0.0-SNAPSHOT"
//    compile 'io.springfox:springfox-swagger-ui:3.0.0-SNAPSHOT'

//    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
}

// configuration properties metadata
// see https://docs.spring.io/spring-boot/docs/2.0.0.RC1/reference/html/configuration-metadata.html#configuration-metadata-annotation-processor
compileJava.dependsOn(processResources)

// unit testing
check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

// sonar
sonarqube {
    properties {
        property 'sonar.projectName', 'api'
        property 'sonar.projectKey', 'api'
        property "sonar.jacoco.reportPaths", "$buildDir/jacoco/jacocoTest.exec" + "," + "$buildDir/jacoco/jacocoIT.exec"
        property "sonar.junit.reportPaths", "$buildDir/test-results/test" + "," + "$buildDir/test-results/verify"
        property "sonar.core.codeCoveragePlugin", "jacoco"
        property "sonar.language", "java"
        property "sonar.coverage.exclusions", "**/models/**/*.java, **/exceptions/**/*.java, **/*Value*.java, **/*Config.java, **/FilterOrder.java, **/technical/**/Reactive*.java"
        property "sonar.exclusions", "**/generated/**/*.java, **/StatusRule.java" // lambda issues with Sonar analysis: https://groups.google.com/forum/#!topic/sonarqube/itiwDuSEWyY
    }
}

sourceSets {
    generated.java
    main.java.srcDirs += generated.java.srcDirs
}

//jar.dependsOn diff
//compileTestJava.dependsOn diff

clean {
    delete sourceSets.generated.java.srcDirs
}

defaultTasks 'clean','build'
